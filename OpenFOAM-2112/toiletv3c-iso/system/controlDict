/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interMixingFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         11.5;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   0.05;

purgeWrite      10;

writeFormat     binary;

writePrecision  12;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.5;
maxAlphaCo      0.5;

maxDeltaT       0.001;

libs            ();

functions
{
    sTransport
    {
        type            scalarTransport;
        libs            (solverFunctionObjects);

        enabled         true;
        writeControl    outputTime;
        writeInterval   1;

        field           s;
        bounded01       true;
        phase           none;

        write           true;

        fvOptions
        {
        }

        resetOnStartUp  false;
    }

    surfaceSampling
    {
        type            surfaces;
        libs            (sampling);
        writeControl    runTime;
        writeInterval   0.01;

        interpolationScheme cellPointWallModified;

        surfaceFormat ensight;

        formatOptions
        {
            vtp
            {
                format binary;
            }
        }

        // Fields to be sampled
        fields
        (
            U
            k
            omega
            nut
            alpha.water
            alpha.air
            p_rgh
            rho
            p
            s
        );

        surfaces
        {
            freeSurface
            {
                type            isoSurface;
                isoField        alpha.air;
                isoValue        0.5;
                interpolate     true;
            }
            yNormalPlus000
            {
                type            patch;
                patches         (symmetry);
                interpolate     true;
                triangulate     false;
            }
            walls
            {
                type            patch;
                patches         (fixedWalls fixedWalls2);
                interpolate     true;
                triangulate     false;
            }
            zNormalMinus004
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0 -0.04);
                    normal      (0 0 1);
                }
                interpolate true;
            }
        }
    }

    fieldMinMax1
    {
        type        fieldMinMax;
        libs        (fieldFunctionObjects);

        mode        magnitude;
        fields      (U);
    }

    yPlus1
    {
        // Mandatory entries (unmodifiable)
        type            yPlus;
        libs            (fieldFunctionObjects);

        executeControl  timeStep;
        executeInterval 1;
        writeControl    writeTime;
        writeInterval   1;
    }
}

// ************************************************************************* //
